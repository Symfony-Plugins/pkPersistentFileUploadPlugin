# pkPersistentFileUploadPlugin

## The Problem 

When you make a mistake completing a form, Symfony presents the form again,
with all of your previous selections intact, and points out the error
so that you can painlessly correct it... unless one of the form fields
is a file upload field.

In that case, you're stuck browsing for the file again and *waiting for it
to be uploaded again*. And if you don't fix all of your validation errors
on the first try, you may have to do this more than once. Ouch!

Symfony's forms framework presents forms to you again with the same 
values by setting the `value` attribute of each `input` element. However,
for security reasons, web browsers don't honor this when the form
element is a file upload element. (That would allow hackers to create
forms with hidden file upload elements that specified the path to any
file on your hard drive... and actually get that file as a result.

And even if browsers did allow it, you would still be uploading the
file over and over again. Far from ideal.

## The Solution

When you use the pkWidgetFormInputFilePersistent widget class and
the pkValidatorFilePersistent validator class, this problem magically
goes away: file upload fields become persistent through multiple
validation passes. If the user doesn't specifically upload a new file
on a later validation pass, their previous valid upload 
is simply used again... without the need to retransmit the file, and without
the need for the user to browse for it again. 

## Requirements

Symfony 1.2. That's it. You do not need to use any particular ORM
because the persistent cache of file uploads is implemented via the filesystem.

## Usage

Here's a simple example:

    // In the configure() method of your form
    $this->setWidget('file', new pkWidgetFormInputFilePersistent());
    $this->setValidator('file', new pkValidatorFilePersistent(
      array("mime_types" => array("image/jpeg"))));

You can pass all of the usual options to both the widget and
the validator. This particular example accepts only JPEG images.

## Telling the User What's Going On

This is great stuff, but if the user doesn't realize it's
happening, they may think they are required to select and
upload the file again on each validation pass. You can
fix that by specifying the `existing-html` option
when you create the widget.

If a file has already been submitted on a previous
validation pass, the HTML you specify in `existing-html` will
be rendered *before* the rest of the widget. Otherwise, it won't be
rendered at all.

Here's an example:

    // In the configure() method of your form
    $this->setWidget('file', new pkWidgetFormInputFilePersistent(
      array('existing-html' => '<p>You have already uploaded a file.' .
        'Use the browse button if you wish to replace it ' .
        'with a different one.</p>')));

The `existing-html` message will only be rendered if the file validated
successfully on the previous pass. 

If you are using additional
custom validators that take the file into account,
then the persistent file input widget won't
be aware of that, so write your `existing-html` message in such a way as
to avoid confusion if there are errors present as well. Most developers
will never run into this situation.

## Things To Be Aware Of

In order to make file uploads persistent, it was necessary to add
a facility to temporarily store those file uploads to the 
`pkValidatorFilePersistent` class.

Newly uploaded files are copied to a subfolder of your project's
`data` folder called `persistent-uploads`, which is created for you
if it does not already exist. Note that if the permissions of your
`data` folder do not permit this, you'll need to manually create the
subfolder and make sure it is readable, writable and executable
by the web server.

For security reasons, uploaded files are stored in temporary files with
randomly-generated names. We *never* blindly trust the filename uploaded
by the user (and you'd better not do that either). 

Every time a new file is uploaded, the code also checks the existing
files in the `persistent-uploads` folder. Any files older than one
hour are removed at this point. If this folder grows too quickly for
comfort, you can adjust the time limit by setting 
`sf_persistent_upload_lifetime` via `settings.yml`. Note that the time 
limit is set in minutes.

Since the validator has no knowledge of whether the rest of the form's
fields will validate it must add every new upload to the cache,
even the one that is ultimately part of the final, successful validation
of the form. That's OK because, an hour later, that copy will be
"aged off" along with any abandoned uploads still in the cache.

The persistent file upload widget actually outputs two input elements,
taking advantage of PHP's support for associative arrays just as
the sfWidgetFormInputDate and sfValidatorDate widgets do. When the
widget outputs a file element named `file[newfile]` and a hidden
element named `file[persistid]`, the validator is able to receive these
as a single associative array with `newfile` and `persistid` keys. The
validator then passes either `newfile` or the cached previous upload
indicated by `persistid` as the value given to the `clean` method of
the parent class. This allows the persistent file widget class to stay
lightweight and reuse as much of the `sfWidgetFormInputFile` class
implementation as possible.

## Related Issues

While this plugin was not intended to solve the following related problems,
they are almost always encountered in the same projects. So I thought
I'd take a moment to give some tips from experience.

### What About sfWidgetFormInputFileEditable?

sfWidgetFormInputFileEditable solves a different problem. That widget
is useful when you want to have the option of completely removing the file 
associated with an existing object that is already stored in your database via
Propel or Doctrine.

### Replacing the File Associated With an Existing Object

Many developers also want to be able to optionally replace the uploaded file
already associated with an existing object, without requiring the user
to pick a new file every time. There must be a file, but the user should
be allowed to pick a new one. This comes up a lot in code that manages
media and so on.

This isn't really the issue this
plugin is intended to solve, but it is closely related, so if you're reading 
this there's a good chance you're interested in the solution to that 
problem too. Consider this code from the `configure()` method of a 
Doctrine or Propel form class:

    $this->setWidget('file', new pkWidgetFormInputFilePersistent());
    $this->setValidator('file', new pkValidatorFilePersistent(
      array("mime_types" => array("image/jpeg"), 
        "required" => (!$this->getObject()->getId()))));

Here I am setting the `required` option of the validator only 
for brand-new objects that haven't been saved at least once already
(they don't have an ID yet).

Now, in the execute method for the action, we need to pay attention to 
whether the user actually uploaded a replacement file and not 
clobber the existing file if they chose not to do so:

    $parameters = $request->getParameter('myform');
    $files = $request->getFiles('myform');
    $this->form->bind($parameters, $files);
    if ($this->form->isValid())
    {
      $file = $this->form->getValue('file');
      // The base implementation for saving files gets confused when 
      // $file is not set, a situation that our code tolerates as useful 
      // because if you're updating a record containing an image you 
      // often don't need to submit a new one.
      unset($this->form['file']);
      $this->form->save();
      $object = $this->form->getObject();
      if ($file)
      {
        $file->save($object->figureOutWhereItShouldBeSaved());
      }
    }

Notice that I grab the value of the `file` field, then `unset`  
that field in the form so that the base class implementation won't
try to save the file for me and get confused if no file was selected.
I then call the save method of the form and retrieve the saved object. 
Finally, if the user did submit a new file, I save it where I want it. 
If they didn't submit a new file, I leave the existing file alone.

Note that this code will work fine whether you choose to use the regular
file widget or my persistent version. 

### What about a progress meter?

A "real" file upload progress meter isn't practical at least in PHP 5 because 
PHP scripts don't start executing until uploads are already complete, meaning
there's no way for your PHP code to communicate any progress indication
to your page. 

But knowing what percentage of the file has been transferred isn't as
important as knowing that the transfer hasn't failed altogether. 

Users are often confused by the lack of obvious feedback during long file 
uploads. They think the page is "timing out" and don't understand that large 
files take a long time to transfer.

The most common workaround, which is found on many major file upload sites,
is simply to display an animated GIF as an activity indicator. But there's
a catch: as soon as your form is submitted, the page goes blank waiting for
new content from the server. Your animated GIF is no longer visible.

The solution for that problem is to embed your file upload form action in
an iframe. The animated GIF lives in the parent document, not in the
iframe. In the onSubmit handler, call a JavaScript function in the parent 
document that makes the animated GIF visible (hint: 
`window.parent.functionname()`). . Then return true so that the
upload can progress normally. In the template displayed in response to the 
file upload, just execute more JavaScript code that hides the
animated GIF again.

## Credits

By Thomas Boutell of [P&#39;unk Avenue](http://www.punkave.com/).
You can reach Tom at [tom@punkave.com](mailto:punkave.com).

## Changelog

Version 0.1.2: documentation fixes.
Version 0.1.1: documentation fixes.
Version 0.1.0: first version.

